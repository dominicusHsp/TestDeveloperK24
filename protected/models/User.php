<?php

/**
 * This is the model class for table "user".
 *
 * The followings are the available columns in table 'user':
 * @property integer $idUser
 * @property string $nama_member
 * @property string $password
 * @property string $alamat
 * @property string $tanggalLahir
 * @property string $email
 * @property string $telephone
 * @property integer $level
 * @property integer $status
 */
class User extends CActiveRecord
{
	public $password;
	public $password_repeat;
	/**
	 * Returns the static model of the specified AR class.
	 * @param string $className active record class name.
	 * @return User the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'user';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('nama_member, password, alamat, tanggalLahir, email, telephone', 'required'),
			array('nama_member', 'unique'),
			array('level, status', 'numerical', 'integerOnly'=>true),
			array('nama_member, password', 'length', 'max'=>40),
			array('password, password_repeat', 'required', 'on' => 'passwordset'),
			array('password', 'length', 'min'=>8, 'max'=>40, 'on' => 'passwordset'),
			array('password', 'compare', 'compareAttribute' => 'password_repeat'),
			array('email', 'length', 'max'=>30),
			array('telephone', 'length', 'max'=>15),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('idUser, nama_member, password, alamat, tanggalLahir, email, telephone, level, status', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'idUser' => 'Id User',
			'nama_member' => 'Nama Member',
			'password' => 'Password',
			'password_repeat' => 'Ulangi Password',
			'alamat' => 'Alamat',
			'tanggalLahir' => 'Tanggal Lahir',
			'email' => 'Email',
			'telephone' => 'Telephone',
			'level' => 'Level',
			'status' => 'Status',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search()
	{
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('idUser',$this->idUser);
		$criteria->compare('nama_member',$this->nama_member,true);
		$criteria->compare('password',$this->password,true);
		$criteria->compare('alamat',$this->alamat,true);
		$criteria->compare('tanggalLahir',$this->tanggalLahir,true);
		$criteria->compare('email',$this->email,true);
		$criteria->compare('telephone',$this->telephone,true);
		$criteria->compare('level',$this->level);
		$criteria->compare('status',$this->status);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}
	/**
	* Using the crypt library that comes with PHP and providing no salt value,
	* so that it is randomly generated by the library.
	*/
	public function hash($value)
	{
		return crypt($value);
	}
	/**
	* We need to call the encryption function whenever we store a password,
	* – on create and on update –
	* so we will overload the beforeSave function to do the hashing.
	*/
	protected function beforeSave()
	{
	if (parent::beforeSave()) {
		if (!empty($this->password))
		$this->password = $this->hash($this->password);

   return true;
	}
	return false;
	}
	/**
	* For logging in, function to check a password value against the hashed value.
	*/
	public function check($value)
	{
		$new_hash = crypt($value, $this->password);
 
		if ($new_hash == $this->password) {
		return true;
	}
	return false;
	}
}